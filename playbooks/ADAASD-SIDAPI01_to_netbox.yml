- name: Sincronizar VM no NetBox
  hosts: ADAASD-SIDAPI01
  gather_facts: false
  become: false
  vars:
    ansible_connection: local
    netbox_url: "{{ lookup('env', 'NETBOX_API') | default('') }}"
    netbox_token: "{{ lookup('env', 'NETBOX_TOKEN') | default('') }}"

  tasks:
    - name: Validar variáveis essenciais da VM
      fail:
        msg: "Variáveis obrigatórias ausentes no inventário. Verifique se todas estão definidas."
      when: vm_name is not defined or vm_cluster is not defined or vm_datacenter is not defined

    - name: Testar conectividade NetBox
      uri:
        url: "{{ netbox_url }}/api/status/"
        method: GET
        headers:
          Authorization: "Token {{ netbox_token }}"
        validate_certs: false
        timeout: 10
      register: netbox_status
      run_once: true
      delegate_to: localhost
      failed_when: false

    - name: Falhar se NetBox inacessível
      fail:
        msg: "NetBox inacessível: {{ netbox_status.msg | default('Erro desconhecido') }} (Status: {{ netbox_status.status | default('N/A') }})"
      run_once: true
      when: (netbox_status.status | default(0)) != 200

    - name: Garantir site
      uri:
        url: "{{ netbox_url }}/api/dcim/sites/"
        method: POST
        headers:
          Authorization: "Token {{ netbox_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          name: "{{ vm_datacenter }}"
          slug: "{{ vm_datacenter | lower | replace('_', '-') }}"
          status: "active"
        status_code: [200, 201, 400]
        validate_certs: false
      run_once: true
      delegate_to: localhost
      failed_when: false

    - name: Obter site_id
      uri:
        url: "{{ netbox_url }}/api/dcim/sites/?name={{ vm_datacenter | urlencode }}"
        method: GET
        headers:
          Authorization: "Token {{ netbox_token }}"
        return_content: true
        validate_certs: false
      register: site_response
      delegate_to: localhost

    - name: Definir site_id
      set_fact:
        site_id: "{{ (site_response.json.results | first).id if site_response.json.results else omit }}"

    - name: Garantir tipo de cluster VMware
      uri:
        url: "{{ netbox_url }}/api/virtualization/cluster-types/"
        method: POST
        headers:
          Authorization: "Token {{ netbox_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          name: "VMware vSphere"
          slug: "vmware-vsphere"
        status_code: [200, 201, 400]
        validate_certs: false
      run_once: true
      delegate_to: localhost
      failed_when: false

    - name: Obter ID do tipo de cluster
      uri:
        url: "{{ netbox_url }}/api/virtualization/cluster-types/?slug=vmware-vsphere"
        method: GET
        headers:
          Authorization: "Token {{ netbox_token }}"
        return_content: true
      register: cluster_type_response
      run_once: true
      delegate_to: localhost

    - name: Garantir cluster
      uri:
        url: "{{ netbox_url }}/api/virtualization/clusters/"
        method: POST
        headers:
          Authorization: "Token {{ netbox_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          name: "{{ vm_cluster }}"
          type: "{{ (cluster_type_response.json.results | first).id }}"
          site: "{{ site_id }}"
        status_code: [200, 201, 400]
        validate_certs: false
      delegate_to: localhost
      register: cluster_creation
      failed_when: false

    - name: Obter ID do cluster
      uri:
        url: "{{ netbox_url }}/api/virtualization/clusters/?name={{ vm_cluster | urlencode }}"
        method: GET
        headers:
          Authorization: "Token {{ netbox_token }}"
        return_content: true
      register: cluster_response
      delegate_to: localhost

    - name: Definir cluster_id
      set_fact:
        cluster_id: "{{ (cluster_response.json.results | first).id if cluster_response.json.results else omit }}"

    - name: Verificar se VM já existe no NetBox
      uri:
        url: "{{ netbox_url }}/api/virtualization/virtual-machines/?name={{ vm_name | urlencode }}"
        method: GET
        headers:
          Authorization: "Token {{ netbox_token }}"
        return_content: true
      register: vm_check_response
      delegate_to: localhost

    - name: Definir vm_id se já existir
      set_fact:
        vm_id: "{{ (vm_check_response.json.results | first).id }}"
      when: vm_check_response.json.results | length > 0

    - name: Montar payload da VM
      set_fact:
        vm_payload:
          name: "{{ vm_name }}"
          status: "{{ 'active' if vm_power_state == 'poweredOn' else 'offline' }}"
          site: "{{ site_id }}"
          cluster: "{{ cluster_id }}"
          vcpus: "{{ vm_cpu_count | int }}"
          memory: "{{ vm_memory_mb | int }}"
          disk: 100
          role: >-
            {% if 'db' in vm_folder | lower %}database
            {% elif 'web' in vm_folder | lower %}web
            {% elif 'app' in vm_folder | lower %}application
            {% else %}unspecified{% endif %}
          platform: >-
            {% if 'windows' in vm_guest_os | lower %}Windows
            {% elif 'linux' in vm_guest_os | lower %}Linux
            {% else %}Unknown{% endif %}
          tenant: "{{ vm_tenant | default(omit) }}"
          comments: |
            Sincronizado via AWX
            Host: {{ inventory_hostname }}
            UUID: {{ vm_uuid }}
            Environment: {{ vm_environment }}
            Criticality: {{ vm_criticality }}
            Guest OS: {{ vm_guest_os }}
            Hostname: {{ vm_hostname }}
            IP: {{ vm_ip_addresses | join(', ') }}
            Folder: {{ vm_folder }}

    - name: Criar ou atualizar VM no NetBox
      uri:
        url: "{{ netbox_url }}/api/virtualization/virtual-machines/{{ vm_id | default('') }}"
        method: "{{ 'PATCH' if vm_id is defined else 'POST' }}"
        headers:
          Authorization: "Token {{ netbox_token }}"
          Content-Type: "application/json"
        body_format: json
        body: "{{ vm_payload }}"
        status_code: [200, 201]
        validate_certs: false
      register: vm_result
      delegate_to: localhost
      failed_when: false

    - name: Verificar se interface eth0 já existe
      uri:
        url: "{{ netbox_url }}/api/virtualization/interfaces/?virtual_machine_id={{ vm_result.json.id if vm_result.json.id is defined else vm_id }}&name=eth0"
        method: GET
        headers:
          Authorization: "Token {{ netbox_token }}"
        return_content: true
        validate_certs: false
      register: vm_interface_check
      delegate_to: localhost

    - name: Garantir interface eth0 para a VM
      uri:
        url: "{{ netbox_url }}/api/virtualization/interfaces/"
        method: POST
        headers:
          Authorization: "Token {{ netbox_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          virtual_machine: "{{ vm_result.json.id if vm_result.json.id is defined else vm_id }}"
          name: "eth0"
          type: "virtual"
        status_code: [200, 201, 400]
        validate_certs: false
      when: vm_interface_check.json.results | length == 0
      register: vm_interface_result
      delegate_to: localhost
      failed_when: false

    - name: Usar interface existente se já havia
      set_fact:
        vm_interface_result:
          json: "{{ vm_interface_check.json.results[0] }}"
      when: vm_interface_check.json.results | length > 0

    - name: Verificar se IP já existe
      uri:
        url: "{{ netbox_url }}/api/ipam/ip-addresses/?address={{ (vm_ip_addresses | first) | urlencode }}/32"
        method: GET
        headers:
          Authorization: "Token {{ netbox_token }}"
        return_content: true
        validate_certs: false
      register: vm_ip_check
      delegate_to: localhost

    - name: Garantir IP da VM no NetBox
      uri:
        url: "{{ netbox_url }}/api/ipam/ip-addresses/"
        method: POST
        headers:
          Authorization: "Token {{ netbox_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          address: "{{ (vm_ip_addresses | first) ~ '/32' }}"
          status: "active"
          assigned_object_type: "virtualization.vminterface"
          assigned_object_id: "{{ vm_interface_result.json.id }}"
        status_code: [200, 201, 400]
        validate_certs: false
      when: vm_ip_check.json.results | length == 0
      register: vm_ip_result
      delegate_to: localhost
      failed_when: false

    - name: Usar IP existente se já havia
      set_fact:
        vm_ip_result:
          json: "{{ vm_ip_check.json.results[0] }}"
      when: vm_ip_check.json.results | length > 0

    - name: Associar IP como primary_ip4
      uri:
        url: "{{ netbox_url }}/api/virtualization/virtual-machines/{{ vm_result.json.id if vm_result.json.id is defined else vm_id }}/"
        method: PATCH
        headers:
          Authorization: "Token {{ netbox_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          primary_ip4: "{{ vm_ip_result.json.id }}"
        status_code: [200, 204]
        validate_certs: false
      delegate_to: localhost
