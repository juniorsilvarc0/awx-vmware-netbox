---
- name: Sincronizar VMs do AWX para o NetBox
  hosts: all
  gather_facts: false
  vars:
    ansible_connection: local
    netbox_url: "{{ lookup('env', 'NETBOX_API') | default('') }}"
    netbox_token: "{{ lookup('env', 'NETBOX_TOKEN') | default('') }}"

  tasks:
    - name: DEBUG - Variáveis de ambiente NetBox
      debug:
        msg:
          - "NETBOX_API: {{ netbox_url }}"
          - "NETBOX_TOKEN definido: {{ netbox_token != '' }}"
          - "Inventário recebido: {{ vm_name | default('não definido') }}"
      run_once: true

    - name: Validar configuração
      fail:
        msg: |
          Configuração inválida:
          NetBox URL: {{ 'OK' if netbox_url != '' else 'FALTANDO' }}
          NetBox Token: {{ 'OK' if netbox_token != '' else 'FALTANDO' }}
          VM Name: {{ 'OK' if vm_name is defined else 'FALTANDO' }}
      when: netbox_url == '' or netbox_token == '' or vm_name is not defined or vm_name == ''

    - name: Verificar se é uma VM válida
      set_fact:
        is_valid_vm: >-
          {{
            vm_name is defined and 
            vm_name != 'localhost' and 
            vm_name != inventory_hostname and 
            vm_name != 'N/A' and 
            vm_name != ''
          }}

    - name: Pular VM inválida
      meta: end_host
      when: not is_valid_vm

    - name: Testar conectividade NetBox
      uri:
        url: "{{ netbox_url }}/api/status/"
        method: GET
        headers:
          Authorization: "Token {{ netbox_token }}"
        validate_certs: false
        timeout: 10
      register: netbox_status
      run_once: true
      delegate_to: localhost
      failed_when: false

    - name: Falhar se NetBox inacessível
      fail:
        msg: "NetBox inacessível: {{ netbox_status.msg | default('Erro desconhecido') }}"
      run_once: true
      when: netbox_status.status != 200

    - name: Verificar/Criar site no NetBox
      uri:
        url: "{{ netbox_url }}/api/dcim/sites/"
        method: POST
        headers:
          Authorization: "Token {{ netbox_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          name: "{{ vm_datacenter | default('Default-Site') }}"
          slug: "{{ (vm_datacenter | default('default-site')) | lower | replace('_', '-') }}"
          status: "active"
        status_code: [200, 201, 400]
        validate_certs: false
      register: site_result
      run_once: true
      delegate_to: localhost
      when: vm_datacenter is defined
      failed_when: false

    - name: Obter ID do site
      uri:
        url: "{{ netbox_url }}/api/dcim/sites/?name={{ vm_datacenter | default('Default-Site') }}"
        method: GET
        headers:
          Authorization: "Token {{ netbox_token }}"
        return_content: true
        validate_certs: false
      register: site_response
      delegate_to: localhost
      when: vm_datacenter is defined
      failed_when: false

    - name: Definir site_id
      set_fact:
        site_id: "{{ (site_response.json.results | first).id if site_response.json.results else none }}"
      when:
        - vm_datacenter is defined
        - site_response is defined
        - site_response.json.results | length > 0

    - name: Criar cluster type VMware
      uri:
        url: "{{ netbox_url }}/api/virtualization/cluster-types/"
        method: POST
        headers:
          Authorization: "Token {{ netbox_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          name: "VMware vSphere"
          slug: "vmware-vsphere"
        status_code: [200, 201, 400]
        validate_certs: false
      register: cluster_type_result
      run_once: true
      delegate_to: localhost
      failed_when: false

    - name: Obter cluster type ID
      uri:
        url: "{{ netbox_url }}/api/virtualization/cluster-types/?slug=vmware-vsphere"
        method: GET
        headers:
          Authorization: "Token {{ netbox_token }}"
        return_content: true
      register: cluster_type_response
      run_once: true
      delegate_to: localhost

    - name: Verificar/Criar cluster no NetBox
      uri:
        url: "{{ netbox_url }}/api/virtualization/clusters/"
        method: POST
        headers:
          Authorization: "Token {{ netbox_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          name: "{{ vm_cluster | default('Default-Cluster') }}"
          type: "{{ (cluster_type_response.json.results | first).id }}"
          site: "{{ site_id | default(omit) }}"
        status_code: [200, 201, 400]
        validate_certs: false
      register: cluster_result
      delegate_to: localhost
      when:
        - vm_cluster is defined
        - cluster_type_response.json.results | length > 0

    - name: Obter ID do cluster
      uri:
        url: "{{ netbox_url }}/api/virtualization/clusters/?name={{ vm_cluster | default('Default-Cluster') }}"
        method: GET
        headers:
          Authorization: "Token {{ netbox_token }}"
        return_content: true
      register: cluster_response
      delegate_to: localhost
      when: vm_cluster is defined

    - name: Definir cluster_id
      set_fact:
        cluster_id: "{{ (cluster_response.json.results | first).id if cluster_response.json.results else none }}"
      when:
        - vm_cluster is defined
        - cluster_response is defined
        - cluster_response.json.results | length > 0

    - name: Verificar se VM {{ vm_name }} já existe
      uri:
        url: "{{ netbox_url }}/api/virtualization/virtual-machines/?name={{ vm_name }}"
        method: GET
        headers:
          Authorization: "Token {{ netbox_token }}"
        return_content: true
      register: vm_check_response
      delegate_to: localhost

    - name: Definir vm_id se existir
      set_fact:
        vm_id: "{{ (vm_check_response.json.results | first).id if vm_check_response.json.results else none }}"

    - name: Montar payload da VM
      set_fact:
        vm_payload:
          name: "{{ vm_name }}"
          status: "{{ 'active' if vm_power_state == 'poweredOn' else 'offline' }}"
          site: "{{ site_id | default(omit) }}"
          cluster: "{{ cluster_id | default(omit) }}"
          vcpus: "{{ vm_cpu_count | default(1) | int }}"
          memory: "{{ vm_memory_mb | default(1024) | int }}"
          disk: 100
        comments: |
          Sincronizado via AWX
          Host: {{ inventory_hostname }}
          UUID: {{ vm_uuid | default('N/A') }}
          Ambiente: {{ vm_environment | default('unknown') }}
          Criticidade: {{ vm_criticality | default('low') }}

    - name: Criar ou atualizar VM no NetBox
      uri:
        url: >-
          {{ netbox_url }}/api/virtualization/virtual-machines/
          {{- vm_id ~ '/' if vm_id else '' }}
        method: "{{ 'PATCH' if vm_id else 'POST' }}"
        headers:
          Authorization: "Token {{ netbox_token }}"
          Content-Type: "application/json"
        body: "{{ vm_payload | to_json }}"
        status_code: [200, 201]
        body_format: json
        validate_certs: false
      register: vm_result
      delegate_to: localhost

    - name: Resultado para VM {{ vm_name }}
      debug:
        msg:
          - "VM: {{ vm_name }}"
          - "Status HTTP: {{ vm_result.status }}"
          - "{{ 'CRIADA' if vm_result.status == 201 else 'ATUALIZADA' if vm_result.status == 200 else 'ERRO' }}"
          - "NetBox ID: {{ vm_result.json.id }}"
