---
- name: Sync VMware VMs from AWX Dynamic Inventory to NetBox
  hosts: localhost
  gather_facts: true
  vars:
    netbox_url: "{{ lookup('env', 'NETBOX_API') }}"
    netbox_token: "{{ lookup('env', 'NETBOX_TOKEN') }}"
    datacenter_name: "ATI-SLC-HCI"
    default_ip_subnet: "24"
    vm_role: "server"
    tenant_name: "ATI"

  tasks:
    # Debug para entender a estrutura do inventário
    - name: Debug inventory structure
      debug:
        msg:
          - "Groups: {{ groups.keys() | list }}"
          - "All hosts: {{ groups['all'] | default([]) }}"
      when: debug_mode | default(false)

    # Verificar conectividade com o NetBox
    - name: Test NetBox connectivity
      uri:
        url: "{{ netbox_url }}/api/"
        method: GET
        headers:
          Authorization: "Token {{ netbox_token }}"
        status_code: 200
      register: netbox_test

    - name: Show NetBox connection status
      debug:
        msg: "✓ NetBox connectivity OK - Version: {{ netbox_test.json.version | default('Unknown') }}"

    # Criar tenant se não existir
    - name: Create NetBox Tenant
      netbox.netbox.netbox_tenant:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          name: "{{ tenant_name }}"
          slug: "{{ tenant_name | lower }}"
        state: present
      ignore_errors: true

    # Criar site no NetBox
    - name: Create NetBox Site
      netbox.netbox.netbox_site:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          name: "{{ datacenter_name }}"
          slug: "{{ datacenter_name | lower | replace('_', '-') }}"
          status: active
          tenant: "{{ tenant_name }}"
        state: present

    # Criar tipo de cluster
    - name: Create NetBox Cluster Type
      netbox.netbox.netbox_cluster_type:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          name: "VMware vSphere"
          slug: "vmware-vsphere"
        state: present

    # Criar role para VMs
    - name: Create NetBox Device Role
      netbox.netbox.netbox_device_role:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          name: "{{ vm_role | title }}"
          slug: "{{ vm_role }}"
          color: "2196f3"
          vm_role: true
        state: present
      ignore_errors: true

    # Coletar e processar dados do inventário dinâmico
    - name: Collect inventory data
      set_fact:
        vm_inventory: "{{ hostvars }}"

    # Filtrar apenas hosts com dados de VM válidos
    - name: Filter valid VM hosts
      set_fact:
        valid_vm_hosts: >-
          {{ hostvars.keys() | list | 
             select('extract', hostvars, 'vm_name') |
             select('extract', hostvars, 'vm_name', 'defined') |
             reject('match', 'localhost') |
             list }}

    - name: Show valid VMs found
      debug:
        msg: "Found {{ valid_vm_hosts | length }} valid VMs in inventory"

    # Coletar clusters únicos
    - name: Get unique clusters
      set_fact:
        unique_clusters: >-
          {{ valid_vm_hosts | 
             map('extract', hostvars, 'vm_cluster') | 
             select('defined') | 
             unique | 
             list }}

    # Criar clusters no NetBox
    - name: Create NetBox Clusters
      netbox.netbox.netbox_cluster:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          name: "{{ item }}"
          type: "VMware vSphere"
          site: "{{ datacenter_name }}"
          tenant: "{{ tenant_name }}"
        state: present
      loop: "{{ unique_clusters }}"
      when: unique_clusters | length > 0

    # Coletar sistemas operacionais únicos
    - name: Get unique operating systems
      set_fact:
        unique_os: >-
          {{ valid_vm_hosts | 
             map('extract', hostvars, 'vm_guest_os') | 
             select('defined') | 
             unique | 
             list }}

    # Criar plataformas no NetBox
    - name: Create NetBox Platforms
      netbox.netbox.netbox_platform:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          name: "{{ item }}"
          slug: "{{ item | lower | regex_replace('[^a-z0-9-]', '-') | regex_replace('-+', '-') | regex_replace('^-|-$', '') }}"
        state: present
      loop: "{{ unique_os }}"
      when: unique_os | length > 0

    # Processar cada VM individualmente
    - name: "Sync VM {{ hostvars[item].vm_name }} to NetBox"
      netbox.netbox.netbox_virtual_machine:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          name: "{{ hostvars[item].vm_name | regex_replace('[\"\\'\\\\]', '') }}"
          cluster: "{{ hostvars[item].vm_cluster | default('Default Cluster') | regex_replace('[\"\\'\\\\]', '') }}"
          platform: "{{ hostvars[item].vm_guest_os | default('Unknown OS') | regex_replace('[\"\\'\\\\]', '') }}"
          role: "{{ vm_role }}"
          tenant: "{{ tenant_name }}"
          vcpus: "{{ hostvars[item].vm_cpu_count | default(1) | int }}"
          memory: "{{ hostvars[item].vm_memory_mb | default(1024) | int }}"
          status: "{{ 'active' if hostvars[item].vm_power_state == 'poweredOn' else 'offline' }}"
          comments: |
            Imported from AWX Dynamic Inventory
            UUID: {{ hostvars[item].vm_uuid | default('N/A') }}
            Folder: {{ hostvars[item].vm_folder | default('N/A') }}
            Environment: {{ hostvars[item].vm_environment | default('unknown') }}
            Criticality: {{ hostvars[item].vm_criticality | default('low') }}
            CPU Category: {{ hostvars[item].vm_cpu_category | default('N/A') }}
            Memory Category: {{ hostvars[item].vm_memory_category | default('N/A') }}
            Tools Status: {{ hostvars[item].vm_tools_status | default('N/A') }}
            Guest Family: {{ hostvars[item].vm_guest_family | default('N/A') }}
            Last Updated: {{ ansible_date_time.iso8601 }}
        state: present
      register: vm_create_result
      ignore_errors: true
      loop: "{{ valid_vm_hosts }}"
      when: valid_vm_hosts | length > 0

    # Criar interfaces de rede para VMs com IP
    - name: "Create network interface for {{ hostvars[item].vm_name }}"
      netbox.netbox.netbox_vm_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          virtual_machine: "{{ hostvars[item].vm_name | regex_replace('[\"\\'\\\\]', '') }}"
          name: "eth0"
          enabled: true
          type: "virtual"
          description: "Primary network interface"
        state: present
      loop: "{{ valid_vm_hosts }}"
      when:
        - valid_vm_hosts | length > 0
        - hostvars[item].vm_ip_addresses is defined
        - hostvars[item].vm_ip_addresses | length > 0
      register: interface_create_result
      ignore_errors: true

    # Criar endereços IP
    - name: "Create IP address for {{ hostvars[item].vm_name }}"
      netbox.netbox.netbox_ip_address:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          address: "{{ hostvars[item].vm_ip_addresses[0] }}/{{ default_ip_subnet }}"
          status: active
          dns_name: "{{ hostvars[item].vm_hostname | default('') | regex_replace('[\"\\'\\\\]', '') }}"
          description: "Primary IP address for {{ hostvars[item].vm_name }}"
          tenant: "{{ tenant_name }}"
        state: present
      loop: "{{ valid_vm_hosts }}"
      when:
        - valid_vm_hosts | length > 0
        - hostvars[item].vm_ip_addresses is defined
        - hostvars[item].vm_ip_addresses | length > 0
      register: ip_create_result
      ignore_errors: true

    # Relatório final
    - name: Generate final sync report
      debug:
        msg:
          - "=== VMware to NetBox Synchronization Report ==="
          - "Total valid VMs processed: {{ valid_vm_hosts | length }}"
          - "Unique clusters: {{ unique_clusters | length }}"
          - "Unique OS platforms: {{ unique_os | length }}"
          - "NetBox URL: {{ netbox_url }}"
          - "Datacenter: {{ datacenter_name }}"
          - "Tenant: {{ tenant_name }}"
          - "=== Synchronization Complete ==="
