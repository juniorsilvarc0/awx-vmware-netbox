---
- name: Sync VMware VMs from AWX Dynamic Inventory to NetBox
  hosts: all
  gather_facts: false
  vars:
    ansible_connection: local
    netbox_url: "{{ lookup('env', 'NETBOX_API') }}"
    netbox_token: "{{ lookup('env', 'NETBOX_TOKEN') }}"
    datacenter_name: "ATI-SLC-HCI"
    default_ip_subnet: "24"
    vm_role: "server"
    tenant_name: "ATI"

  tasks:
    # Verificar se é uma VM válida
    - name: Check if host is a valid VM
      set_fact:
        is_valid_vm: "{{ vm_name is defined and vm_name != 'localhost' and vm_name != inventory_hostname }}"

    # Mostrar informações da VM atual
    - name: Show VM info
      debug:
        msg:
          - "Processing host: {{ inventory_hostname }}"
          - "VM Name: {{ vm_name | default('N/A') }}"
          - "VM Power State: {{ vm_power_state | default('N/A') }}"
          - "VM IP: {{ vm_ip_addresses[0] | default('N/A') if vm_ip_addresses is defined else 'N/A' }}"
          - "Is Valid VM: {{ is_valid_vm }}"
      when: is_valid_vm

    # Criar tenant (run_once para evitar duplicações)
    - name: Create NetBox Tenant
      netbox.netbox.netbox_tenant:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          name: "{{ tenant_name }}"
          slug: "{{ tenant_name | lower }}"
        state: present
      run_once: true
      when: is_valid_vm
      ignore_errors: true

    # Criar site no NetBox
    - name: Create NetBox Site
      netbox.netbox.netbox_site:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          name: "{{ datacenter_name }}"
          slug: "{{ datacenter_name | lower | replace('_', '-') }}"
          status: active
          tenant: "{{ tenant_name }}"
        state: present
      run_once: true
      when: is_valid_vm

    # Criar tipo de cluster
    - name: Create NetBox Cluster Type
      netbox.netbox.netbox_cluster_type:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          name: "VMware vSphere"
          slug: "vmware-vsphere"
        state: present
      run_once: true
      when: is_valid_vm

    # Criar role para VMs
    - name: Create NetBox Device Role
      netbox.netbox.netbox_device_role:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          name: "{{ vm_role | title }}"
          slug: "{{ vm_role }}"
          color: "2196f3"
          vm_role: true
        state: present
      run_once: true
      when: is_valid_vm
      ignore_errors: true

    # Criar cluster para esta VM
    - name: Create NetBox Cluster
      netbox.netbox.netbox_cluster:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          name: "{{ vm_cluster | default('Default Cluster') }}"
          type: "VMware vSphere"
          site: "{{ datacenter_name }}"
          tenant: "{{ tenant_name }}"
        state: present
      when: 
        - is_valid_vm
        - vm_cluster is defined
      ignore_errors: true

    # Criar plataforma para esta VM
    - name: Create NetBox Platform
      netbox.netbox.netbox_platform:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          name: "{{ vm_guest_os | default('Unknown OS') }}"
          slug: "{{ vm_guest_os | default('unknown-os') | lower | regex_replace('[^a-z0-9-]', '-') | regex_replace('-+', '-') | regex_replace('^-|-$', '') }}"
        state: present
      when:
        - is_valid_vm
        - vm_guest_os is defined
      ignore_errors: true

    # Sincronizar VM para NetBox
    - name: "Sync VM {{ vm_name }} to NetBox"
      netbox.netbox.netbox_virtual_machine:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          name: "{{ vm_name | regex_replace('[\"\\'\\\\]', '') }}"
          cluster: "{{ vm_cluster | default('Default Cluster') | regex_replace('[\"\\'\\\\]', '') }}"
          platform: "{{ vm_guest_os | default('Unknown OS') | regex_replace('[\"\\'\\\\]', '') }}"
          role: "{{ vm_role }}"
          tenant: "{{ tenant_name }}"
          vcpus: "{{ vm_cpu_count | default(1) | int }}"
          memory: "{{ vm_memory_mb | default(1024) | int }}"
          status: "{{ 'active' if vm_power_state == 'poweredOn' else 'offline' }}"
          comments: |
            Imported from AWX Dynamic Inventory
            UUID: {{ vm_uuid | default('N/A') }}
            Folder: {{ vm_folder | default('N/A') }}
            Environment: {{ vm_environment | default('unknown') }}
            Criticality: {{ vm_criticality | default('low') }}
            CPU Category: {{ vm_cpu_category | default('N/A') }}
            Memory Category: {{ vm_memory_category | default('N/A') }}
            Tools Status: {{ vm_tools_status | default('N/A') }}
            Guest Family: {{ vm_guest_family | default('N/A') }}
        state: present
      register: vm_sync_result
      when: is_valid_vm
      ignore_errors: true

    # Criar interface de rede
    - name: "Create network interface for {{ vm_name }}"
      netbox.netbox.netbox_vm_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          virtual_machine: "{{ vm_name | regex_replace('[\"\\'\\\\]', '') }}"
          name: "eth0"
          enabled: true
          type: "virtual"
          description: "Primary network interface"
        state: present
      when:
        - is_valid_vm
        - vm_ip_addresses is defined
        - vm_ip_addresses | length > 0
        - vm_sync_result is succeeded
      register: interface_result
      ignore_errors: true

    # Criar endereço IP
    - name: "Create IP address for {{ vm_name }}"
      netbox.netbox.netbox_ip_address:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          address: "{{ vm_ip_addresses[0] }}/{{ default_ip_subnet }}"
          status: active
          dns_name: "{{ vm_hostname | default('') | regex_replace('[\"\\'\\\\]', '') }}"
          description: "Primary IP address for {{ vm_name }}"
          tenant: "{{ tenant_name }}"
        state: present
      when:
        - is_valid_vm
        - vm_ip_addresses is defined
        - vm_ip_addresses | length > 0
        - vm_sync_result is succeeded
      register: ip_result
      ignore_errors: true

    # Mostrar resultado
    - name: "Show sync result for {{ vm_name }}"
      debug:
        msg:
          - "VM: {{ vm_name }}"
          - "Sync Status: {{ 'SUCCESS' if vm_sync_result is succeeded else 'FAILED' }}"
          - "IP Created: {{ 'YES' if ip_result is succeeded else 'NO' }}"
          - "Interface Created: {{ 'YES' if interface_result is succeeded else 'NO' }}"
      when: is_valid_vm
