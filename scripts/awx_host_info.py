#!/usr/bin/env python3
"""
Script para consulta de informa√ß√µes de host via API do AWX
Similar ao teste.sh, mas em Python com melhor tratamento de erros
"""

import json
import requests
import sys
from typing import Dict, Any, Optional


class AWXHostInfo:
    def __init__(self, awx_url: str, username: str, password: str, inventory_id: int):
        self.awx_url = awx_url.rstrip('/')
        self.username = username
        self.password = password
        self.inventory_id = inventory_id
        self.session = requests.Session()
        self.session.auth = (username, password)
        self.session.headers.update({'Content-Type': 'application/json'})
    
    def awx_api(self, endpoint: str) -> Dict[str, Any]:
        """Faz requisi√ß√£o para API do AWX"""
        try:
            url = f"{self.awx_url}/api/v2/{endpoint}"
            response = self.session.get(url)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
            return {}
    
    def find_host(self, host_name: str) -> Optional[Dict[str, Any]]:
        """Busca host no invent√°rio"""
        print(f"üîç Buscando host: {host_name}")
        print(f"üì¶ Invent√°rio ID: {self.inventory_id} (VMware Inventory)")
        print("=" * 50)
        
        print("1Ô∏è‚É£ Buscando host no invent√°rio...")
        response = self.awx_api(f"inventories/{self.inventory_id}/hosts/?name={host_name}")
        
        if not response or response.get('count', 0) == 0:
            print(f"‚ùå Host '{host_name}' n√£o encontrado")
            self.list_available_hosts()
            return None
        
        host = response['results'][0]
        print("‚úÖ Host encontrado:")
        print(f"   ID: {host['id']}")
        print(f"   Nome: {host['name']}")
        
        return host
    
    def get_host_details(self, host_id: int) -> Dict[str, Any]:
        """Obt√©m detalhes completos do host"""
        print("\n2Ô∏è‚É£ Obtendo vari√°veis do host...")
        host_details = self.awx_api(f"hosts/{host_id}/")
        
        if host_details:
            print("üìã Detalhes do host:")
            details = {
                'id': host_details.get('id'),
                'name': host_details.get('name'),
                'description': host_details.get('description'),
                'enabled': host_details.get('enabled'),
                'variables': host_details.get('variables', {})
            }
            print(json.dumps(details, indent=2, ensure_ascii=False))
            
            # Mostrar vari√°veis
            print("\nüîß Vari√°veis do host:")
            variables = host_details.get('variables', {})
            if variables:
                print(json.dumps(variables, indent=2, ensure_ascii=False))
            else:
                print("‚ÑπÔ∏è Nenhuma vari√°vel definida no host")
        
        return host_details
    
    def get_ansible_facts(self, host_id: int) -> Dict[str, Any]:
        """Obt√©m facts do Ansible"""
        print("\n3Ô∏è‚É£ Verificando Ansible Facts...")
        facts = self.awx_api(f"hosts/{host_id}/ansible_facts/")
        
        if facts:
            facts_count = len(facts)
            print(f"‚úÖ Facts dispon√≠veis ({facts_count} chaves)")
            
            # Mostrar facts importantes
            print("\nüñ•Ô∏è Informa√ß√µes do sistema:")
            system_info = {
                'hostname': facts.get('ansible_hostname'),
                'fqdn': facts.get('ansible_fqdn'),
                'os_family': facts.get('ansible_os_family'),
                'distribution': facts.get('ansible_distribution'),
                'version': facts.get('ansible_distribution_version'),
                'architecture': facts.get('ansible_architecture'),
                'cores': facts.get('ansible_processor_cores'),
                'memory_mb': facts.get('ansible_memtotal_mb'),
                'ip_address': facts.get('ansible_default_ipv4', {}).get('address')
            }
            print(json.dumps(system_info, indent=2, ensure_ascii=False))
            
            # IPs das interfaces
            print("\nüåê Interfaces de rede:")
            interfaces = facts.get('ansible_interfaces', [])
            for interface in interfaces:
                interface_data = facts.get(f'ansible_{interface}', {})
                if 'ipv4' in interface_data:
                    ip = interface_data['ipv4'].get('address', 'sem IP')
                    print(f"   {interface}: {ip}")
        else:
            print("‚ÑπÔ∏è Facts n√£o dispon√≠veis")
        
        return facts
    
    def get_host_groups(self, host_id: int) -> Dict[str, Any]:
        """Obt√©m grupos do host"""
        print("\n4Ô∏è‚É£ Grupos do host...")
        groups = self.awx_api(f"hosts/{host_id}/groups/")
        
        if groups and groups.get('count', 0) > 0:
            group_count = groups['count']
            print(f"‚úÖ Host pertence a {group_count} grupo(s):")
            for group in groups.get('results', []):
                print(f"   üë• {group['name']} (ID: {group['id']})")
        else:
            print("‚ÑπÔ∏è Host n√£o pertence a nenhum grupo")
        
        return groups
    
    def list_available_hosts(self):
        """Lista hosts dispon√≠veis no invent√°rio"""
        print("\nüñ•Ô∏è Hosts dispon√≠veis no invent√°rio VMware Inventory:")
        response = self.awx_api(f"inventories/{self.inventory_id}/hosts/")
        
        if response and response.get('results'):
            for host in response['results']:
                print(f"   ‚Ä¢ {host['name']} (ID: {host['id']})")
    
    def print_useful_commands(self, host_id: int):
        """Imprime comandos √∫teis para consulta"""
        print("\n" + "=" * 50)
        print("üéØ Comandos √∫teis:")
        print()
        print("# Vari√°veis do host")
        print(f"curl -u '{self.username}:{self.password}' '{self.awx_url}/api/v2/hosts/{host_id}/' | jq '.variables'")
        print()
        print("# Facts do host")
        print(f"curl -u '{self.username}:{self.password}' '{self.awx_url}/api/v2/hosts/{host_id}/ansible_facts/'")
    
    def get_host_info(self, host_name: str):
        """M√©todo principal para obter informa√ß√µes do host"""
        host = self.find_host(host_name)
        if not host:
            return
        
        host_id = host['id']
        
        # Obter informa√ß√µes detalhadas
        self.get_host_details(host_id)
        self.get_ansible_facts(host_id)
        self.get_host_groups(host_id)
        self.print_useful_commands(host_id)


def main():
    # Configura√ß√µes (devem ser passadas como vari√°veis de ambiente ou argumentos)
    AWX_URL = "http://10.0.100.159:8013"
    USERNAME = "junior"
    PASSWORD = "JR83silV@83"
    INVENTORY_ID = 3  # VMware Inventory
    
    # Host a ser consultado
    if len(sys.argv) > 1:
        HOST_NAME = sys.argv[1]
    else:
        HOST_NAME = "ADAASD-SIDAPI01"
    
    # Criar inst√¢ncia e executar consulta
    awx_client = AWXHostInfo(AWX_URL, USERNAME, PASSWORD, INVENTORY_ID)
    awx_client.get_host_info(HOST_NAME)


if __name__ == "__main__":
    main()